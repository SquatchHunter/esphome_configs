## Formatting Notice, I have used 2 hashtags/pound signs on all original comments + additional I added, single comments on values that have been disabled in this config.
## This config is based on Athom's Official ESPHome config for the Smart Plug V2 - https://github.com/athom-tech/athom-configs/blob/main/athom-smart-plug-v2.yaml

substitutions:
  ## Avoid underscores, since ESPHome uses mDNS, underscores can be funny with mDNS and there is no inbuilt sanitiser.
  name: "totally-unique-name"
  friendly_name: "Super Amazing Friendly Name"
  ## Allows ESP device to be automatically lined to an 'Area' in Home Assistant. Typically used for areas such as 'Lounge Room', 'Kitchen' etc
  room: ""
  ## Proper case + clearer description.
  device_description: "Athom Smart Plug V2 with Energy Monitoring" 
  project_name: "Athom Technology.Smart Plug V2"
  ## Version Bump cause why not.
  project_version: "2.0.4" 
  relay_restore_mode: RESTORE_DEFAULT_OFF
  ## Decrease the rate at which the cse7766 updates as it can be spammy
  sensor_update_interval: 30s
  ## Current Limit in Amps. AU Plug = 10. IL, BR, EU, UK, US Plug = 16.
  current_limit : "10"
  ## Define a domain for this device to use. i.e. iot.home.lan (so device will appear as athom-smart-plug-v2.iot.home.lan in DNS/DHCP logs)
  dns_domain: ".local"
  ## Set timezone of the smart plug. Useful if the plug is in a location different to the HA server. Can be entered in unix Country/Area format (i.e. "Australia/Sydney")
  timezone: "Australia/Sydney"
  ## Enables faster network connections, with last connected SSID being connected to and no full scan for SSID being undertaken
  wifi_fast_connect: "false" 

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  area: "${room}"
  name_add_mac_suffix: false
  min_version: 2024.2.1
  project:
    name: "${project_name}"
    version: "${project_version}"

esp8266:
  ## https://esphome.io/components/esp8266.html
  board: esp8285
  restore_from_flash: true

preferences:
  ## Athom Default, increased from 1 minute to 5, but we can go further
  # flash_write_interval: 5min
  ## increaed, since plugs do not get toggled very frequently to preserve flash we should save to the flash less frequently.
  flash_write_interval: 15min 

api:
  encryption: 
    ## EPSHome & HA seem to whinge if there is no encryption.
    key: {your_super_secure_key_here} 
ota:

logger:
  baud_rate: 0

## Webservers are very large, to save space we disable it on the 8266
# web_server:
#   port: 80

wifi:
  ## https://esphome.io/components/wifi.html
  ap: {} 
  fast_connect: "${wifi_fast_connect}"
  domain: "${dns_domain}"
captive_portal:

uart:
  ## https://esphome.io/components/uart.html#uart
  rx_pin: RX
  baud_rate: 4800

globals:
  - id: total_energy
    type: float
    restore_value: yes
    initial_value: '0.0'

sensor:
  ## https://esphome.io/components/sensor/cse7766.html
  - platform: cse7766
    current:
      name: "Current"
      filters:
        - throttle_average: ${sensor_update_interval}
        ## This chip will report 0 when draw is less than 3w
        - lambda: if (x < 0.060) return 0.0; else return x;
      on_value_range:
        - above: ${current_limit}
          then:
            - switch.turn_off: relay
    voltage:
      name: "Voltage"
      filters:
        - throttle_average: ${sensor_update_interval}
    power:
      #name: "Power"
      ## Rename "Power" to "Wattage" for clarity 
      name: "Wattage"
      id: power_sensor
      filters:
        - throttle_average: ${sensor_update_interval}
        ## This chip will report 0 when draw is less than 3w
        - lambda: if (x < 3.0) return 0.0; else return x;    
    energy:
      name: "Energy"
      id: energy
      unit_of_measurement: kWh
      filters:
        - throttle: ${sensor_update_interval}
        ## Multiplication factor from W to kW is 0.001
        - multiply: 0.001
      on_value:
        then:
          - lambda: |-
              static float previous_energy_value = 0.0;
              float current_energy_value = id(energy).state;
              id(total_energy) += current_energy_value - previous_energy_value;
              previous_energy_value = current_energy_value;
              id(total_energy_sensor).update();

    apparent_power:
      name: "Apparent Power"
      filters:
        - throttle_average: ${sensor_update_interval}
    power_factor:
      name: "Power Factor"
      filters:
        - throttle_average: ${sensor_update_interval}

  - platform: template
    name: "Total Energy"
    id: total_energy_sensor
    unit_of_measurement: kWh
    device_class: "energy"
    state_class: "total_increasing"
    icon: "mdi:lightning-bolt"
    accuracy_decimals: 3
    lambda: |-
      return id(total_energy);
    update_interval: never

  - platform: total_daily_energy
    name: "Total Daily Energy"
    restore: true
    power_id: power_sensor
    unit_of_measurement: kWh
    accuracy_decimals: 3
    filters:
      - multiply: 0.001

  ## Internal uptime sensor, reports only in seconds, see formatted output below
  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    entity_category: diagnostic
    internal: true

  ## https://esphome.io/components/sensor/wifi_signal
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic
    ## Since I disabled the "formatted" readout below, we need to make this visable to HA again
    # internal: true

  ## I prefer the RSSI read out in -xdBm, it makes more sense, plus HA/EPSHome will log a "warning" about the % being used as the Unit of Measurement since its technically unsupported.
  ## Reports the WiFi signal strength in %
  # - platform: copy
  #   source_id: wifi_signal_db
  #   name: "WiFi Strength"
  #   filters:
  #     - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
  #   unit_of_measurement: "%" 
  #   entity_category: diagnostic

binary_sensor:
  - platform: status
    name: "Status"
    entity_category: diagnostic    

  - platform: gpio
    pin:
      number: 5
      mode: INPUT_PULLUP
      inverted: true
    name: "Power Button"
    # disabled_by_default: true
    ## make power button internal as it is not needed in the slightest in frontend
    internal: true
    on_multi_click:
      - timing:
        - ON for at most 1s
        - OFF for at least 0.2s
        then:
          - switch.toggle: relay
      - timing:
        - ON for at least 4s
        then:
          - button.press: Reset

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: diagnostic
    ssid:
      name: "Connected SSID"
      entity_category: diagnostic
    mac_address:
      name: "Mac Address"
      entity_category: diagnostic

  ## Creates a sensor showing when the device was last restarted
  - platform: template
    name: 'Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic

  ## Creates a sensor of the uptime of the device, in formatted days, hours, minutes and seconds
  - platform: template
    name: "Uptime"
    entity_category: diagnostic
    lambda: |-
      int seconds = (id(uptime_sensor).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days > 3650 ) {
        return { "Starting up" };
      } else if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
    icon: mdi:clock-start

button:
  - platform: restart
    name: "Restart"
    entity_category: config
    device_class: restart
  - platform: factory_reset
    name: "Factory Reset"
    id: Reset
    entity_category: config
  - platform: safe_mode
    name: "Safe Mode"
    entity_category: config
    on_press:
      logger.log: "Entering Safe Mode..."

switch:
  - platform: gpio
    name: "Switch"
    pin: GPIO12
    id: relay
    restore_mode: ${relay_restore_mode}

light:
  - platform: status_led
    name: "Status LED"
    id: blue_led
    # disabled_by_default: true
    ## Hide this entirely from HA for decluttering
    internal: true
    pin:
      inverted: true
      number: GPIO13

time:
  - platform: sntp
    id: sntp_time
    ## Define the timezone of the device
    timezone: "${timezone}"
    ## Change sync interval from default 5min to 6 hours
    update_interval: 360min    
    ## Publish the time the device was last restarted
    on_time_sync:
      then:
        ## Update last restart time, but only once.
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'
